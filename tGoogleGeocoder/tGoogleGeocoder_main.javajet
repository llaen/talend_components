<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map	
        java.net.URI 
		java.net.URISyntaxException 
		java.io.IOException 
		java.io.UnsupportedEncodingException 
		java.security.InvalidKeyException 
		java.security.NoSuchAlgorithmException 
		javax.crypto.Mac 
		javax.crypto.spec.SecretKeySpec 
		java.net.URL 
		java.io.BufferedReader 
		java.io.InputStreamReader 
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
%>

<%
String connName = null;
if (node.getIncomingConnections().size()==1) {
	IConnection conn = node.getIncomingConnections().get(0);
	connName = conn.getName();

	String ColumnSource = ElementParameterParser.getValue(node, "__ADDRESS_COLUMN__");
	String client = ElementParameterParser.getValue(node, "__CLIENT__");
	String keyString = ElementParameterParser.getValue(node, "__PRIVATE_KEY__");
	String skip = ElementParameterParser.getValue(node, "__SKIP__");
	String debug = ElementParameterParser.getValue(node, "__DEBUG__");
	String use_https = ElementParameterParser.getValue(node, "__USE_HTTPS__");
    String use_proxy = ElementParameterParser.getValue(node, "__USE_PROXY__");
	String http_proxy_host = ElementParameterParser.getValue(node, "__HTTP_PROXY_HOST__");
	String http_proxy_port = ElementParameterParser.getValue(node, "__HTTP_PROXY_PORT__");
	String https_proxy_host = ElementParameterParser.getValue(node, "__HTTPS_PROXY_HOST__");
	String https_proxy_port = ElementParameterParser.getValue(node, "__HTTPS_PROXY_PORT__");	
	
	List<IMetadataTable> metadatas = node.getMetadataList();
	IMetadataTable metadata = metadatas.get(0);
	List<IMetadataColumn> columnsout = metadata.getListColumns();
					
	
	List< ? extends IConnection> connsout = node.getOutgoingConnections(); 
	if (connsout != null) {
		for (int i = 0; i < connsout.size(); i++) {
			IConnection connout = connsout.get(i);
			if(connout.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
				for (int j = 0; j < columnsout.size(); j++) {
					IMetadataColumn columnout=columnsout.get(j);
					if (!columnout.getLabel().equals("lat") && !columnout.getLabel().equals("lon")) {
%>
						<%=connout.getName() %>.<%=columnout.getLabel() %>=<%=connName %>.<%=columnout.getLabel() %>;
<%
					}
				}
%>
                Boolean bSkip_<%=cid%> = new Boolean(<%=skip %>);
				
				if (bSkip_<%=cid%>) {
					<%=connout.getName() %>.lat = null;
					<%=connout.getName() %>.lon = null;
				} else {

                    Boolean bDebug_<%=cid%> = new Boolean(<%= debug %>);  
				
					if (bDebug_<%=cid%>) { 
  					   System.out.println("-----------------------------------------------");
			
					}
							
					// Set proxy servers
					Boolean bUseProxy_<%=cid%> = new Boolean(<%= use_proxy %>); 
					
					if (bUseProxy_<%=cid%>) {
					    						
					    System.setProperty("http.proxyHost", <%= http_proxy_host %>); 
                        System.setProperty("http.proxyPort", <%= http_proxy_port %>);  
                        System.setProperty("https.proxyHost", <%= https_proxy_host %>); 
                        System.setProperty("https.proxyPort", <%= https_proxy_port %>);
						
						if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: HTTP/HTTPs proxies will be used");
							System.out.println("DEBUG: HTTP proxy: " + <%= http_proxy_host %> + ":" + <%= http_proxy_port %>);
							System.out.println("DEBUG: HTTPS proxy: " + <%= https_proxy_host %> + ":" + <%= https_proxy_port %>);
						}
						
					}
					else {
						if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: No proxies will be used");
						}
					}
					
					// Use HTTPS to access Google API?
					String url_<%=cid%> = "";
					
					Boolean bUseHttps_<%=cid%> = new Boolean(<%= use_https %>);  
					
					if (bUseHttps_<%=cid%>) {
					    if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: HTTPS will be used to access Google Maps API");
						}					  

					    url_<%=cid%> = "https://maps.googleapis.com/maps/api/geocode/json";
					}
					else {
					    if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: HTTP will be used to access Google Maps API");
						}
					
					    url_<%=cid%> = "http://maps.googleapis.com/maps/api/geocode/json";
					}
					
					if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: Address to geocode: " + <%=connName %>.<%=ColumnSource %>);
					}					
					
					url_<%=cid%> += "?address="+java.net.URLEncoder.encode(<%=connName %>.<%=ColumnSource %>, "UTF-8");
					url_<%=cid%> += "&sensor=false";
										
					if (<%=client %> != null && <%=client %> != "" &&
						<%=keyString %> != null && <%=keyString %> != "") {
					   
                        // add the client-id to the URL
						url_<%=cid%> += "&client=" + <%=ElementParameterParser.getValue(node, "__CLIENT__")%>;
						
						if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: URL to sign: " + url_<%=cid%>);
						}

                        java.net.URL urlToSign_<%=cid%> = new java.net.URL(url_<%=cid%>);
						
					    // generate signature for each API call URL
					    
						// convert private key to binary

						byte[] key_<%=cid%>;
					    String keyString_<%=cid%> = <%=keyString%>;
					    keyString_<%=cid%> = keyString_<%=cid%>.replace('-', '+');
					    keyString_<%=cid%> = keyString_<%=cid%>.replace('_', '/');
                        //System.out.println("DEBUG Key: <" + keyString_<%=cid%> + ">");
                        key_<%=cid%> = net.iharder.Base64.decode(keyString_<%=cid%>);
					    //System.out.println("DEBUG: Decoced Key: " + key_<%=cid%>);					
                        
						String urlPath_<%=cid%> = urlToSign_<%=cid%>.getPath();
						String urlQuery_<%=cid%> = urlToSign_<%=cid%>.getQuery();
						String resource_<%=cid%> = urlPath_<%=cid%> + '?' + urlQuery_<%=cid%>; 
						 
						// get an HMAC-SHA1 signing key from the raw key bytes
                        javax.crypto.spec.SecretKeySpec sha1Key_<%=cid%> = new javax.crypto.spec.SecretKeySpec(key_<%=cid%>, "HmacSHA1"); 
						
						// get an HMAC-SHA1 Mac instance and initialize it with the HMAC-SHA1 key
                        javax.crypto.Mac mac_<%=cid%> = javax.crypto.Mac.getInstance("HmacSHA1");
                        mac_<%=cid%>.init(sha1Key_<%=cid%>);

						// compute the binary signature for the request
                        byte[] sigBytes_<%=cid%> = mac_<%=cid%>.doFinal(resource_<%=cid%>.getBytes());

						// base 64 encode the binary signature
                        String signature_<%=cid%> = net.iharder.Base64.encodeBytes(sigBytes_<%=cid%>);
    
                        // convert the signature to 'web safe' base 64
                        signature_<%=cid%> = signature_<%=cid%>.replace('+', '-');
                        signature_<%=cid%> = signature_<%=cid%>.replace('/', '_');
    
	                    if (bDebug_<%=cid%>) {
						    System.out.println("DEBUG: Generated Signature: " + signature_<%=cid%>);
						}
	                    
	                    // add signature to URL
					    url_<%=cid%> =  urlToSign_<%=cid%>.getProtocol() + "://" + urlToSign_<%=cid%>.getHost() + resource_<%=cid%> + "&signature=" + signature_<%=cid%>;		
                                                						
					}
					
					if (bDebug_<%=cid%>) {
					   System.out.println("DEBUG: Full API request: " + url_<%=cid%>); 
					}
					
					// wait X milliseconds to appease google
					long t0_<%=cid%>, t1_<%=cid%>;
					t0_<%=cid%> = java.lang.System.currentTimeMillis();
					do {
						t1_<%=cid%> = java.lang.System.currentTimeMillis();
					} while ((t1_<%=cid%> - t0_<%=cid%>) < (java.lang.Integer.valueOf(<%=ElementParameterParser.getValue(node, "__DELAY__")%>)));
					
					try {
						java.io.InputStream is_<%=cid%> = new java.net.URL(url_<%=cid%>).openStream();
						
						com.fasterxml.jackson.core.JsonFactory f_<%=cid%> = new com.fasterxml.jackson.core.JsonFactory();
						
						com.fasterxml.jackson.core.JsonParser jp_<%=cid%> = f_<%=cid%>.createJsonParser(is_<%=cid%>);
						
						Double lat_<%=cid%> = 0.;
						Double lon_<%=cid%> = 0.;
						String status_<%=cid%> = "";
						
						jp_<%=cid%>.nextToken();
						while (jp_<%=cid%>.hasCurrentToken()) {
							if (jp_<%=cid%>.getCurrentName() != null && jp_<%=cid%>.getCurrentName().equals("location")) {
								while (jp_<%=cid%>.nextToken() != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {
									if (jp_<%=cid%>.getCurrentName().equals("lat")) {
										jp_<%=cid%>.nextToken();
										lat_<%=cid%> = jp_<%=cid%>.getValueAsDouble();
									}
									if (jp_<%=cid%>.getCurrentName().equals("lng")) {
										jp_<%=cid%>.nextToken();
										lon_<%=cid%> = jp_<%=cid%>.getValueAsDouble();
									}
								}
							}
							if (jp_<%=cid%>.getCurrentName() != null && jp_<%=cid%>.getCurrentName().equals("status")) {
								jp_<%=cid%>.nextToken();
								status_<%=cid%> = jp_<%=cid%>.getValueAsString();
							}
							jp_<%=cid%>.nextToken();
						}
						jp_<%=cid%>.close();
						
						if (status_<%=cid%>.equals("OK")) {
							<%=connout.getName() %>.lat = lat_<%=cid%>;
							<%=connout.getName() %>.lon = lon_<%=cid%>;
							
							if (bDebug_<%=cid%>) {
						        System.out.println("DEBUG: Google Maps API successfully returned the result:");
								System.out.println("DEBUG: Lat: " + lat_<%=cid%>);
								System.out.println("DEBUG: Lon: " + lon_<%=cid%>);
						    }
							
						} else {
							<%=connout.getName() %>.lat = null;
							<%=connout.getName() %>.lon = null;
							
						    System.out.println("ERROR: Google Maps API could not return the result for: " + url_<%=cid%>);
							System.out.println("INFO: Usually this happens if too many queries are sent to the Google Maps API within a small period of time");	
							System.out.println("INFO: Reconfigure the delay in milliseconds between the queries and run again - e.g. 50 ms");
                            							
						}
					} catch (java.io.IOException e) {
						System.out.println("Got an exception: " + e.getMessage());
						
						<%=connout.getName() %>.lat = null;
						<%=connout.getName() %>.lon = null;
					}
				}

<%
			}
		}
	}
}
%>
